{% set docker_image = "public.ecr.aws/q9t5s3a7/vllm-ci-test-repo:$BUILDKITE_COMMIT" %}
{% set docker_image_amd = "rocm/vllm-ci:$BUILDKITE_COMMIT" %}
{% set default_working_dir = "/vllm-workspace/tests" %}
{% set hf_home = "/root/.cache/huggingface" %}
{% set hf_home_efs = "/mnt/efs/hf_cache" %}
{% set hf_home_fsx = "/fsx/hf_cache" %}
{% set mirror_hw_selector = "$BUILDKITE_MIRROR_HW" %}

steps:
  - label: ":docker: build image"
    key: image-build
    agents:
      queue: cpu_queue_premerge
    commands:
      - "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q9t5s3a7"
      - |
        #!/bin/bash
        if [[ -z $(docker manifest inspect {{ docker_image }}) ]]; then
          echo "Image not found, proceeding with build..."
        else
          echo "Image found"
          exit 0
        fi
      - "docker build --file docker/Dockerfile --build-arg max_jobs=16 --build-arg buildkite_commit=$BUILDKITE_COMMIT --build-arg USE_SCCACHE=1 --tag {{ docker_image }} --target test --progress plain ."
      - "docker push {{ docker_image }}"
    env:
      DOCKER_BUILDKIT: "1"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 5
        - exit_status: -10  # Agent was lost
          limit: 5

  - block: Run Neuron Test
    depends_on: ~
    key: run-neuron-test
    
  - label: "Neuron Test"
    depends_on: run-neuron-test
    agents:
      queue: neuron
    command: bash .buildkite/scripts/hardware_ci/run-neuron-test.sh
    soft_fail: false

  {% for step in steps %}
  {% if step.gpu != "a100" and step.fast_check == true and step.num_nodes < 2 %}
  - label: "{{ step.label }}"
    depends_on: image-build
    agents:
      {% if step.label == "Documentation Build" %}
      queue: small_cpu_queue_premerge
      {% elif step.no_gpu %}
      queue: cpu_queue_premerge
      {% elif step.num_gpus == 2 or step.num_gpus == 4 %}
      queue: gpu_4_queue
      {% else %}
      queue: gpu_1_queue
      {% endif %}
    soft_fail: {{ step.soft_fail or false }}
    {% if step.parallelism %}
    parallelism: {{ step.parallelism }}
    {% endif %}
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 5
        - exit_status: -10  # Agent was lost
          limit: 5
    plugins:
      - docker#v5.2.0:
          image: {{ docker_image }}
          always-pull: true
          propagate-environment: true
          {% if not step.no_gpu %}
          gpus: all
          {% endif %}
          {% if step.label == "Benchmarks" %}
          mount-buildkite-agent: true
          {% endif %}
          command: ["bash", "-xc", "(command nvidia-smi || true) && export VLLM_LOGGING_LEVEL=DEBUG && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe  }} && {{ step.command  or (step.commands | join(' && ')) | safe }}"]
          environment:
            - VLLM_USAGE_SOURCE=ci-test
            - HF_HOME={{ hf_home_fsx }}
            - HF_TOKEN
            {% if step.label == "Speculative decoding tests" %}
            - VLLM_ATTENTION_BACKEND=XFORMERS
            {% endif %}
          volumes:
            - /dev/shm:/dev/shm
            - {{ hf_home_fsx }}:{{ hf_home_fsx }}
  {% endif %}
  {% endfor %}

  {% for step in steps %}
  {% if step.gpu != "a100" and step.fast_check != true and step.num_nodes < 2 %}
  - block: "Run {{ step.label }}"
    key: block-{{ step.label | replace(" ", "-") | lower | replace("(", "") | replace(")", "") | replace("%", "") | replace(",", "-") }}
    depends_on: image-build

  - label: "{{ step.label }}"
    depends_on: block-{{ step.label | replace(" ", "-") | lower | replace("(", "") | replace(")", "") | replace("%", "") | replace(",", "-") }}
    agents:
      {% if step.label == "Documentation Build" %}
      queue: small_cpu_queue_premerge
      {% elif step.no_gpu %}
      queue: cpu_queue_premerge
      {% elif step.num_gpus == 2 or step.num_gpus == 4 %}
      queue: gpu_4_queue
      {% else %}
      queue: gpu_1_queue
      {% endif %}
    soft_fail: {{ step.soft_fail or false }}
    {% if step.parallelism %}
    parallelism: {{ step.parallelism }}
    {% endif %}
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 5
        - exit_status: -10  # Agent was lost
          limit: 5
    plugins:
      - docker#v5.2.0:
          image: {{ docker_image }}
          always-pull: true
          propagate-environment: true
          {% if not step.no_gpu %}
          gpus: all
          {% endif %}
          {% if step.label == "Benchmarks" %}
          mount-buildkite-agent: true
          {% endif %}
          command: ["bash", "-xc", "(command nvidia-smi || true) && export VLLM_LOGGING_LEVEL=DEBUG && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe  }} && {{ step.command  or (step.commands | join(' && ')) | safe }}"]
          environment:
            - VLLM_USAGE_SOURCE=ci-test
            - HF_HOME={{ hf_home_fsx }}
            - HF_TOKEN
            {% if step.label == "Speculative decoding tests" %}
            - VLLM_ATTENTION_BACKEND=XFORMERS
            {% endif %}
          volumes:
            - /dev/shm:/dev/shm
            - {{ hf_home_fsx }}:{{ hf_home_fsx }}
  {% endif %}
  {% endfor %}

  {% for step in steps %}
  {% if step.num_nodes >= 2 %}
  - block: "Run {{ step.label }}"
    key: block-{{ step.label | replace(" ", "-") | lower | replace("(", "") | replace(")", "") | replace("%", "") | replace(",", "-") }}
    depends_on: image-build

  - label: "{{ step.label }}"
    depends_on: block-{{ step.label | replace(" ", "-") | lower | replace("(", "") | replace(")", "") | replace("%", "") | replace(",", "-") }}
    agents:
      queue: gpu_4_queue
    commands:
      - ./.buildkite/scripts/run-multi-node-test.sh {{ (step.working_dir or default_working_dir) | safe  }} {{ step.num_nodes }} {{ step.num_gpus }} {{ docker_image }} {% for command in step.commands %}"{{ (command | join(" && ")) | safe }}" {% endfor %}
  {% endif %}
  {% endfor %}

  - block: "Run A100 tests"
    depends_on: image-build

  {% for step in steps %}
  {% if step.gpu == "a100" %}
  - label: "{{ step.label }}"
    priority: 10000
    agents:
      queue: a100_queue
    soft_fail: {{ step.soft_fail or false }}
    {% if step.parallelism %}
    parallelism: {{ step.parallelism }}
    {% endif %}
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 5
        - exit_status: -10  # Agent was lost
          limit: 5
    plugins:
    - kubernetes:
        podSpec:
          priorityClassName: ci
          containers:
          - image: {{ docker_image }}
            command: ["bash"]
            args:
            - '-c'
            - "'(command nvidia-smi || true) && export VLLM_LOGGING_LEVEL=DEBUG && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe }} && {{ step.command or (step.commands | join(' && ')) | safe }}'"
            resources:
              limits:
                nvidia.com/gpu: {{ step.num_gpus or 1 }}
            volumeMounts:
            - name: devshm
              mountPath: /dev/shm
            - name: hf-cache
              mountPath: {{ hf_home }}
            env:
            - name: VLLM_USAGE_SOURCE
              value: ci-test
            - name: HF_HOME
              value: {{ hf_home }}
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token-secret
                  key: token
          nodeSelector:
            nvidia.com/gpu.product: NVIDIA-A100-SXM4-80GB
          volumes:
          - name: devshm
            emptyDir:
              medium: Memory
          - name: hf-cache
            hostPath:
              path: {{ hf_home }}
              type: Directory
  {% endif %}
  {% endfor %}

  - block: "Run TPU V0 Test"
    key: block-tpu-v0
    depends_on: ~

  - label: "TPU V0 Test"
    key: run-tpu-v0-test
    depends_on: block-tpu-v0
    soft_fail: true
    agents:
      queue: tpu_v5_queue
    commands:
      - if [[ -f ".buildkite/scripts/hardware_ci/run-tpu-test.sh" ]]; then bash .buildkite/scripts/hardware_ci/run-tpu-test.sh; fi
      - yes | docker system prune -a

  - label: "TPU V0 Test Notification"
    depends_on: run-tpu-v0-test
    agents:
      queue: tpu_v5_queue
    commands: |
      if [ $$(buildkite-agent step get "outcome" --step "run-tpu-v0-test") != "passed" ]; then
         cat <<- YAML | buildkite-agent pipeline upload
         steps:
           - label: "Notify owners about failing test"
             agents:
               queue: tpu_v5_queue
             command: echo "TPU V0 Test failed"
             notify:
               - slack:
                   channels:
                     - "#collab-google-ci"
      YAML
      fi

  - block: "Run TPU V1 Test"
    key: block-tpu-v1
    depends_on: ~

  - label: "TPU V1 Test"
    key: run-tpu-v1-test
    depends_on: block-tpu-v1
    soft_fail: true
    agents:
      queue: tpu_v5_queue
    commands:
      - if [[ -f ".buildkite/scripts/hardware_ci/run-tpu-v1-test.sh" ]]; then bash .buildkite/scripts/hardware_ci/run-tpu-v1-test.sh; fi
      - yes | docker system prune -a

  - label: "TPU V1 Test Notification"
    depends_on: run-tpu-v1-test
    agents:
      queue: tpu_v5_queue
    commands: |
      if [ $$(buildkite-agent step get "outcome" --step "run-tpu-v1-test") != "passed" ]; then
         cat <<- YAML | buildkite-agent pipeline upload
         steps:
           - label: "Notify owners about failing test"
             agents:
               queue: tpu_v5_queue
             command: echo "TPU V1 Test failed"
             notify:
               - slack:
                   channels:
                     - "#collab-google-ci"
      YAML
      fi
  - block: "Run GH200 Test"
    depends_on: ~
    key: block-gh200
  
  - label: "GH200 Test"
    depends_on: block-gh200
    soft_fail: true
    agents:
      queue: gh200_queue
    command: nvidia-smi && bash .buildkite/scripts/hardware_ci/run-gh200-test.sh

  - group: "AMD Tests"
    depends_on: ~
    steps:    
      - label: "AMD: :docker: build image"
        depends_on: ~
        soft_fail: true
        commands:
          - "grep -i 'from base as test' docker/Dockerfile.rocm && docker build --build-arg max_jobs=16 --tag {{ docker_image_amd }} -f docker/Dockerfile.rocm --target test --progress plain . || docker build --build-arg max_jobs=16 --tag {{ docker_image_amd }} -f docker/Dockerfile.rocm --progress plain ."
          - "docker push {{ docker_image_amd }}"
        key: amd-build
        env:
          DOCKER_BUILDKIT: "1"
        retry:
          automatic:
            - exit_status: -1  # Agent was lost
              limit: 1
            - exit_status: -10  # Agent was lost
              limit: 1
            - exit_status: 1  # Machine occasionally fail
              limit: 1
        agents:
          queue: amd-cpu
    {% for step in steps %}
    {% if step.mirror_hardwares and ( "$BUILDKITE_MIRROR_HW" in step.mirror_hardwares ) %}
      - label: "AMD: {{ step.label }}"
        depends_on: amd-build
        agents:
         {% if step.label and step.label=="Benchmarks" or step.label=="LoRA Test %N" or step.label=="Kernels Test %N" or step.label=="Distributed Tests (4 GPUs)" or step.label=="Distributed Comm Ops Test" or step.label=="2 Node Tests (4 GPUs in total)" or step.label=="Distributed Tests (2 GPUs)" or step.label=="Plugin Tests (2 GPUs)" or step.label=="Multi-step Tests (4 GPUs)" or step.label=="Pipeline Parallelism Test" or step.label=="LoRA TP Test (Distributed)" or step.label=="Weight Loading Multiple GPU Test" %}
           queue: amd_mi300
         {% else %}
           queue: amd_mi300_1
         {% endif%}
        command: bash .buildkite/scripts/hardware_ci/run-amd-test.sh "(command rocm-smi || true) && export VLLM_LOGGING_LEVEL=DEBUG && export VLLM_ALLOW_DEPRECATED_BEAM_SEARCH=1 && cd {{ (step.working_dir or default_working_dir) | safe  }} ; {{ step.command  or (step.commands | join(" && ")) | safe }}"
        env:
          DOCKER_BUILDKIT: "1"
        priority: 100
        soft_fail: true
    {% endif %}
    {% endfor %}
